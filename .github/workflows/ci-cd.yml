name: Al Fozan Insights Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 🔍 Frontend: Lint, Build, and Validate
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --legacy-peer-deps

      - name: Run linting
        run: |
          cd frontend
          npm run lint -- --max-warnings=0

      - name: Run type checking
        run: |
          cd frontend
          npx tsc --noEmit

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/
          if-no-files-found: warn

  # 🐍 Backend: Test, Validate, and Check API
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Matches Render's recommended version

      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Check module import
        run: |
          cd backend
          python -c "from app import app; print(f'App imported successfully: {app.name}')"

      - name: Validate API endpoints (using Flask test client)
        run: |
          cd backend
          python -c "
          
  # 🔒 Security Scan (Container & Filesystem)
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

  # 🚀 Deploy to Staging (develop → Vercel + Render)
  deploy-staging:
    needs: [frontend-test, backend-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Notify staging deployment
        run: echo "✅ develop branch passed tests. Vercel and Render will auto-deploy to staging."

  # 🏁 Deploy to Production (main → Vercel + Render)
  deploy-production:
    needs: [frontend-test, backend-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Notify production deployment
        run: echo "✅ main branch passed tests. Vercel and Render will auto-deploy to production."